---
name: "CI"
concurrency:  # Cancel any existing runs of this workflow for this same PR
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true
on: # yamllint disable-line rule:truthy rule:comments
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"
  pull_request: ~

env:
  APP_NAME: "pylint-nautobot"

jobs:
  ruff-format:
    runs-on: "ubuntu-latest"
    env:
      INVOKE_PYLINT_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Linting: ruff format"
        run: "poetry run invoke ruff --action format"
  ruff-lint:
    runs-on: "ubuntu-latest"
    env:
      INVOKE_PYLINT_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Linting: ruff"
        run: "poetry run invoke ruff"
  check-docs-build:
    runs-on: "ubuntu-latest"
    env:
      INVOKE_PYLINT_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Check Docs Build"
        run: "poetry run invoke build-and-check-docs"
  poetry:
    runs-on: "ubuntu-latest"
    env:
      INVOKE_PYLINT_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Checking: poetry lock file"
        run: "poetry run invoke lock --check"
  yamllint:
    runs-on: "ubuntu-latest"
    env:
      INVOKE_PYLINT_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Linting: yamllint"
        run: "poetry run invoke yamllint"
  pylint:
    needs:
      - "poetry"
      - "yamllint"
      - "ruff-format"
      - "ruff-lint"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: true
      matrix:
        # TODO: Update to 3.12 once #89 is implemented
        python-version: ["3.11"]
        nautobot-version: ["stable"]
    env:
      INVOKE_PYLINT_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
      INVOKE_PYLINT_NAUTOBOT_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Set up Docker Buildx"
        id: "buildx"
        uses: "docker/setup-buildx-action@v3"
      - name: "Build"
        uses: "docker/build-push-action@v5"
        with:
          builder: "${{ steps.buildx.outputs.name }}"
          context: "./"
          push: false
          load: true
          tags: "${{ env.APP_NAME }}/nautobot:${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          file: "./development/Dockerfile"
          cache-from: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          cache-to: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          build-args: |
            NAUTOBOT_VER=${{ matrix.nautobot-version }}
            PYTHON_VER=${{ matrix.python-version }}
      - name: "Linting: pylint"
        run: "poetry run invoke pylint"
  pytest:
    needs:
      - "pylint"
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.11"]
        # Incompatible with 2.2.3-2.3.0 due to https://github.com/nautobot/nautobot/pull/6116
        nautobot-version: ["1.6", "2.0", "2.1", "2.2.2", "2.3"]
        include:
          - python-version: "3.8"
            nautobot-version: "stable"
          # TODO: Enable once #89 is implemented and remove 2.3 from matrix
          # - python-version: "3.12"
          #   nautobot-version: "stable"
    runs-on: "ubuntu-latest"
    env:
      INVOKE_PYLINT_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
      INVOKE_PYLINT_NAUTOBOT_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Set up Docker Buildx"
        id: "buildx"
        uses: "docker/setup-buildx-action@v3"
      - name: "Build"
        uses: "docker/build-push-action@v5"
        with:
          builder: "${{ steps.buildx.outputs.name }}"
          context: "./"
          push: false
          load: true
          tags: "${{ env.APP_NAME }}/nautobot:${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          file: "./development/Dockerfile"
          cache-from: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          cache-to: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          build-args: |
            NAUTOBOT_VER=${{ matrix.nautobot-version }}
            PYTHON_VER=${{ matrix.python-version }}
      - name: "Run Tests"
        run: "poetry run invoke pytest"
  publish_gh:
    needs:
      - "pytest"
    name: "Publish to GitHub"
    runs-on: "ubuntu-latest"
    if: "startsWith(github.ref, 'refs/tags/v')"
    env:
      INVOKE_PYLINT_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Set up Python"
        uses: "actions/setup-python@v5"
        with:
          python-version: "3.11"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Install Dependencies (needed for mkdocs)"
        run: "poetry install --no-root"
      - name: "Build Documentation"
        run: "poetry run invoke build-and-check-docs"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Upload binaries to release"
        uses: "svenstaro/upload-release-action@v2"
        with:
          repo_token: "${{ secrets.GH_NAUTOBOT_BOT_TOKEN }}"
          file: "dist/*"
          tag: "${{ github.ref }}"
          overwrite: true
          file_glob: true
  publish_pypi:
    needs:
      - "pytest"
    name: "Push Package to PyPI"
    runs-on: "ubuntu-latest"
    if: "startsWith(github.ref, 'refs/tags/v')"
    env:
      INVOKE_PYLINT_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Set up Python"
        uses: "actions/setup-python@v5"
        with:
          python-version: "3.11"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Install Dependencies (needed for mkdocs)"
        run: "poetry install --no-root"
      - name: "Build Documentation"
        run: "poetry run invoke build-and-check-docs"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Push to PyPI"
        uses: "pypa/gh-action-pypi-publish@release/v1"
        with:
          user: "__token__"
          password: "${{ secrets.PYPI_API_TOKEN }}"
  slack-notify:
    needs:
      - "publish_gh"
      - "publish_pypi"
    runs-on: "ubuntu-latest"
    env:
      SLACK_WEBHOOK_URL: "${{ secrets.SLACK_WEBHOOK_URL }}"
      SLACK_MESSAGE: >-
        *NOTIFICATION: NEW-RELEASE-PUBLISHED*\n
        Repository: <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>\n
        Release: <${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}|${{ github.ref_name }}>\n
        Published by: <${{ github.server_url }}/${{ github.actor }}|${{ github.actor }}>
    steps:
      - name: "Send a notification to Slack"
        # ENVs cannot be used directly in job.if. This is a workaround to check
        # if SLACK_WEBHOOK_URL is present.
        if: "env.SLACK_WEBHOOK_URL != ''"
        uses: "slackapi/slack-github-action@v1"
        with:
          payload: |
            {
              "text": "${{ env.SLACK_MESSAGE }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.SLACK_MESSAGE }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: "${{ secrets.SLACK_WEBHOOK_URL }}"
          SLACK_WEBHOOK_TYPE: "INCOMING_WEBHOOK"
